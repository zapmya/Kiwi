"Name"    = 'MyFirstSimpleProgrammingLanguage'
"Author"  = 'Thomas Grundner'
"Version" = '0.5 (structs)' 
"About"   = 'This is a very simple grammar designed for academic purposes'

"Case Sensitive" = True 
"Start Symbol"   = <Compilation Unit>

!-------------------------------------------------------              

{FloatTypeSuffix} =[dfDF]
{ExponentPartIndicator} = [eE]
{Sign} = [-+]
{HexDigit} = {Digit}+[abcdefABCDEF]
{NoZeroDigit} = [123456789]
{LongTypeSuffix} =[lL]

! Allow decimal numbers.
! We do not make any differnce between integer and floating point types
FloatingPointLiteral   = {Digit}+'.'{Digit}+{FloatTypeSuffix}? | {Digit}+{FloatTypeSuffix} | '.'{Digit}+{FloatTypeSuffix}?
FloatingPointLiteralExponent = {Digit}+'.'{Digit}+{ExponentPartIndicator}{Sign}?{Digit}+{FloatTypeSuffix}? | {Digit}+{ExponentPartIndicator}{Sign}?{Digit}+{FloatTypeSuffix}? | '.'{Digit}+{ExponentPartIndicator}{Sign}?{Digit}+{FloatTypeSuffix}?
StartWithNoZeroDecimalIntegerLiteral = {NoZeroDigit}{Digit}*{LongTypeSuffix}?
StartWithZeroDecimalIntegerLiteral = '0'{LongTypeSuffix}?
HexIntegerLiteral = '0'('x'|'X'){HexDigit}+{LongTypeSuffix}?

Identifier    = {Letter}{AlphaNumeric}*
PrimitiveType = 'boolean'|'byte'|'short'|'int'|'long'|'char'|'float'|'double'|'void'
VectorType = ('boolean'|'byte'|'short'|'int'|'long'|'char'|'float'|'double')({NoZeroDigit}{Digit}?)

!------------------------------------------------------


<Compilation Unit>
       ::=  <Compilation Items>     

<Compilation Items>
       ::= <Compilation Items> <Compilation Item>
        |  ! Zero or more

<Compilation Item>
       ::= <Class>
        | <Struct>

<Struct> ::= 'struct' Identifier '{' <DeclarationStatements> '}'

<Class> ::= 'class' Identifier '{' <Functions> '}'
         
<Functions> ::= <Prototype> <Functions>
              | <Prototype>

<ArgumentList> ::= <ArgumentList> ',' <DeclarationExpression>
               | <DeclarationExpression>
               |

<ExpressionList> ::= <Expression> ',' <ExpressionList>
               | <Expression>
               |

<Prototype> ::= <Function>
              | <ExternFunction>

<Function> ::= <DeclarationExpression> '(' <ArgumentList> ')' <Block>

<ExternFunction> ::= 'extern' <DeclarationExpression> '(' <ArgumentList> ')' ';'

<Block> ::= '{' <Statements> '}' 
          | '{' '}'

<BlockOrStatement> ::= <Block>
                     | <Statement>

<Statements> ::= <Statement> <Statements>
               | <Statement>

<Statement>  ::= <AssignmentStatement>
               | <CallStatement>
               | <IfStatement>
               | <IfElseStatement>
               | <WhileStatement>
               | <DoWhileStatement>
               | <ReturnStatement>
               | <DeclarationStatement>

<FlatType> ::= PrimitiveType
             | VectorType

<ArrayType> ::= <FlatType> <Dims>

<Type> ::= <FlatType>
         | <ArrayType>

<DeclarationExpression> ::= <Type> Identifier

<DeclarationStatement> ::= <DeclarationExpression> ';'

<DeclarationStatements> ::= <DeclarationStatements> <DeclarationStatement>
                         | <DeclarationStatement>

<AssignmentStatement> ::= <DeclarationExpression> '=' <Expression> ';'
                        | <IndexAccess> '=' <Expression> ';'
                        | Identifier '=' <Expression> ';'

<IfStatement> ::= 'if' '(' <RelExpression> ')' <BlockOrStatement>

<IfElseStatement> ::= 'if' '(' <RelExpression> ')' <BlockOrStatement> 'else' <BlockOrStatement>

<WhileStatement> ::= 'while' '(' <RelExpression> ')' <BlockOrStatement>

<DoWhileStatement> ::= 'do' <BlockOrStatement> 'while' '(' <RelExpression> ')' ';'

<ReturnStatement> ::= 'return' <Expression> ';'

<CallStatement>   ::= <CallExp> ';'

<DimExprs> ::= '['<Expression>']'
             | <DimExprs> '['<Expression>']'

<Dims> ::= '[' ']'
         | <Dims> '[' ']'
         
<ArrayConstructor> ::= 'new' <FlatType> <DimExprs>
                     | 'new' <FlatType> <DimExprs> <Dims>
                     | 'native' <Number>

<Constructor> ::= 'new' VectorType '(' <ExpressionList> ')'
               | <ArrayConstructor>

<IndexAccess> ::= Identifier <DimExprs>

<Expression> ::= <RelExpression>

<RelExpression> ::= <RelExpression> '==' <Add Exp>
                  | <RelExpression> '!=' <Add Exp>
                  | <RelExpression> '>' <Add Exp>
                  | <RelExpression> '>=' <Add Exp>
                  | <RelExpression> '<' <Add Exp>
                  | <RelExpression> '<=' <Add Exp>
                  | <Add Exp>

<Add Exp> ::= <Add Exp> '+' <Mult Exp>
               | <Add Exp> '-' <Mult Exp>
               | <Mult Exp> 

<Mult Exp>   ::= <Mult Exp> '*' <Negate Exp> 
               | <Mult Exp> '/' <Negate Exp> 
               | <Mult Exp> '%' <Negate Exp> 
               | <Negate Exp>
               | <CallExp> 

<Negate Exp> ::= '-' <Value> 
               | <Value> 

<CallExp>    ::= Identifier '(' <ExpressionList> ')'

<Number> ::= HexIntegerLiteral
           | FloatingPointLiteral
           | FloatingPointLiteralExponent
           | StartWithNoZeroDecimalIntegerLiteral
           | StartWithZeroDecimalIntegerLiteral
                     
<Value>      ::= Identifier
               | <Number>
               | <Constructor>
               | <IndexAccess>
               | '(' <Expression> ')'
